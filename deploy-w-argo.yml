version: v1
kind: kubernetes
application: potato-facts
targets: #This section defines the targets to which you are deploying, and their constraints.
  dev:
    account: demo-dev-cluster
    namespace: borealis-dev
    strategy: rolling
  infosec:
    account: demo-staging-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Security_Scanners
      dependsOn:
        - dev
    namespace: borealis-infosec
    strategy: rolling
  prod-apac:
    account: demo-prod-west-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Send_Slack_Deployment_Complete
      beforeDeployment:
        - pause:
            requiresRoles:
              - Organization Admin
            untilApproved: true
        - runWebhook:
            name: Send_Slack_Deployment_Approval_Required
      dependsOn:
        - infosec
        - staging
    namespace: borealis-prod-apac
    strategy: mycanary
  prod-east:
    account: demo-prod-west-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Send_Slack_Deployment_Complete
      beforeDeployment:
        - pause:
            requiresRoles:
              - Organization Admin
            untilApproved: true
        - runWebhook:
            name: Send_Slack_Deployment_Approval_Required
      dependsOn:
        - infosec
        - staging
    namespace: borealis-prod-east
    strategy: mycanary
  prod-eu:
    account: demo-prod-eu-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Send_Slack_Deployment_Complete
      beforeDeployment:
        - pause:
            requiresRoles:
              - Organization Admin
            untilApproved: true
        - runWebhook:
            name: Send_Slack_Deployment_Approval_Required
      dependsOn:
        - infosec
        - staging
    namespace: borealis-prod-eu
    strategy: myBlueGreen
  prod-operator:
    account: demo-prod-west-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Refer to Argo Rollouts for status
      beforeDeployment:
        - pause:
            untilApproved: true
          requiresRoles:
            - Organization Admin
      dependsOn:
        - infosec
        - staging
    namespace: borealis-argo
    strategy: rolling
  prod-west:
    account: demo-prod-west-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Send_Slack_Deployment_Complete
      beforeDeployment:
        - pause:
            requiresRoles:
              - Organization Admin
            untilApproved: true
        - runWebhook:
            name: Send_Slack_Deployment_Approval_Required
      dependsOn:
        - infosec
        - staging
    namespace: borealis-prod
    strategy: mycanary
  staging:
    account: demo-staging-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Integration_Tests
      dependsOn:
        - dev
    namespace: borealis-staging
    strategy: rolling
manifests: #This section defines the Manifests you are deploying, by default they reach all targets, but you can specify certain targets if needed.
  - path: manifests/potato-facts.yml
    targets:
      - infosec
      - staging
      - dev
      - prod-west
      - prod-eu
      - prod-east
      - prod-apac
  - path: manifests/argo-facts.yml
    targets:
      - prod-operator
  - path: manifests/potato-facts-external-service.yml
    targets:
      - prod-operator
      - prod-west
      - prod-eu
      - prod-east
      - prod-apac
  - path: manifests/potato-facts-internal-service.yml
    targets:
      - dev
      - staging
      - infosec
      - prod-eu
  - path: manifests/potato-lies.yml
    targets:
      - infosec
      - staging
      - dev
      - prod-west
      - prod-eu
      - prod-east
      - prod-apac
  - path: manifests/istio-files/
    targets:
      - prod-apac
strategies: #This section defines the strategies environments can use to deploy.
  myBlueGreen:
    blueGreen:
      redirectTrafficAfter:
        - analysis:
            interval: 10
            lookbackMethod: GROWING
            numberOfJudgmentRuns: 1
            queries:
              - avgCPUUsage-pass
            rollBackMode: manual
            rollForwardMode: automatic
            units: seconds
        - exposeServices:
            services:
              - potato-facts-internal
              - potato-lies-internal
              - potato-facts-external
              - potato-lies-external
            ttl:
              duration: 30
              unit: MINUTES
        - pause:
            untilApproved: true
      shutDownOldVersionAfter:
        - pause:
            untilApproved: true
        - runWebhook:
            name: Check_Logs
        - analysis:
            interval: 10
            lookbackMethod: GROWING
            numberOfJudgmentRuns: 1
            queries:
              - avgCPUUsage-pass
            rollBackMode: manual
            units: seconds
  mycanary:
    canary:
      steps:
        - exposeServices:
            services:
              - potato-facts-external
              - potato-lies-external
            ttl:
              duration: 30
              unit: MINUTES
        - setWeight:
            weight: 25
        - analysis:
            interval: 10
            lookbackMethod: GROWING
            numberOfJudgmentRuns: 1
            queries:
              - avgCPUUsage-pass
            rollBackMode: manual
            rollForwardMode: automatic
            units: seconds
        - runWebhook:
            name: Check_Logs
        - setWeight:
            weight: 50
        - analysis:
            interval: 10
            lookbackMethod: GROWING
            numberOfJudgmentRuns: 3
            queries:
              - avgCPUUsage-fail
              - avgCPUUsage-pass
            rollBackMode: manual
            rollForwardMode: manual
            units: seconds
        - runWebhook:
            name: Check_Logs
        - setWeight:
            weight: 100
  rolling:
    canary:
      steps:
        - setWeight:
            weight: 100
        - exposeServices:
            services:
              - potato-facts-internal
              - potato-lies-internal
            ttl:
              duration: 30
              unit: MINUTES
analysis: #This section defines queries against your monitoring system that can be used for automated canary analysis.
  defaultMetricProviderName: Stephen-Prometheus
  queries:
    - lowerLimit: 0
      name: avgCPUUsage-pass
      queryTemplate: avg (avg_over_time(container_cpu_system_seconds_total{job="kubelet"}[{{armory.promQlStepInterval}}]) * on (pod)  group_left (annotation_app) sum(kube_pod_annotations{job="kube-state-metrics",annotation_deploy_armory_io_replica_set_name="{{armory.replicaSetName}}"}) by (annotation_app, pod)) by (annotation_app) OR on() vector(0)
      upperLimit: 10000
    - lowerLimit: 0
      name: avgCPUUsage-fail
      queryTemplate: "avg (avg_over_time(container_cpu_system_seconds_total{job=\"kubelet\"}[{{armory.promQlStepInterval}}]) * on (pod)  group_left (annotation_app)\n sum(kube_pod_annotations{job=\"kube-state-metrics\",annotation_deploy_armory_io_replica_set_name=\"{{armory.replicaSetName}}\"})\n by (annotation_app, pod)) by (annotation_app) "
      upperLimit: 0.001
trafficManagement: #Traffic management configuration
  - smi:
      - rootServiceName: potato-facts-external
      - rootServiceName: potato-lies-external
    targets:
      - prod-east
  - kubernetes:
      - activeService: potato-facts-external
        previewService: potato-facts-internal
      - activeService: potato-lies-external
        previewService: potato-lies-internal
    targets:
      - prod-eu
  - istio:
      - destinationRule:
          activeSubsetName: v1
          name: potato-facts
        virtualService:
          name: potato-facts
      - destinationRule:
          activeSubsetName: v1
          name: potato-lies-external
        virtualService:
          name: potato-lies-external
    targets:
      - prod-apac
webhooks: #Webhooks can be used to run external automation.
  - agentIdentifier: demo-prod-west-cluster
    bodyTemplate:
      inline: '{ "cmd": "kubectl", "arg": "wait -n=borealis-argo rollout/potato-facts --for=condition=Completed --timeout=30m", "callbackURL": "{{armory.callbackUri}}/callback" }'
    method: POST
    name: Refer to Argo Rollouts for status
    networkMode: remoteNetworkAgent
    retryCount: 3
    uriTemplate: http://cmd-hook.borealis-demo-agent-prod:8081/cmd
  - bodyTemplate:
      inline: |-
        { "event_type": "webhookCallback", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Check_Logs
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
  - bodyTemplate:
      inline: |-
        { "event_type": "checkLogs", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Security_Scanners
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
  - bodyTemplate:
      inline: |-
        { "event_type": "checkLogs", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Integration_Tests
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
  - bodyTemplate:
      inline: '{ "status_url": "https://console.cloud.armory.io/deployments/{{armory.deploymentId}}", "message": "Deployment of {{armory.applicationName}} to {{armory.environmentName}} is starting." }'
    disableCallback: true
    method: POST
    name: Send_Slack_Deployment_Starting
    retryCount: 3
    uriTemplate: '{{secrets.slackwebhookURL}}'
  - bodyTemplate:
      inline: '{ "status_url": "https://console.cloud.armory.io/deployments/{{armory.deploymentId}}", "message": "Deployment of {{armory.applicationName}} to {{armory.environmentName}} is complete." }'
    disableCallback: true
    method: POST
    name: Send_Slack_Deployment_Complete
    retryCount: 3
    uriTemplate: '{{secrets.slackwebhookURL}}'
  - bodyTemplate:
      inline: '{ "status_url": "https://console.cloud.armory.io/deployments/{{armory.deploymentId}}", "message": "Deployment of {{armory.applicationName}} to {{armory.environmentName}} requires a manual approval." }'
    disableCallback: true
    method: POST
    name: Send_Slack_Deployment_Approval_Required
    retryCount: 3
    uriTemplate: '{{secrets.slackwebhookURL}}'
